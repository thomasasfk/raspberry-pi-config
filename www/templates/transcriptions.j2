{% extends "base.j2" %}

{% block title %}Transcriptions{% endblock %}

{% block favicon %}
    <link rel="icon" type="image/x-icon" href="https://openai.com/favicon.ico">
{% endblock %}

{% block styles %}
<style>
    /* Only keeping essential custom styles that can't be easily done with Tailwind */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }
</style>
{% endblock %}

{% macro transcription_item(t) %}
<div class="bg-[var(--card-bg)] rounded-lg p-4 mb-4 cursor-pointer transcription-item" data-item-id="{{ t.filename }}">
    <div class="flex flex-wrap justify-between items-center mb-3">
        <span class="font-medium">{{ t.filename }}</span>
        <span class="text-[var(--text-secondary)] text-sm">{{ t.created_at | format_date }}</span>
    </div>
    <div class="flex flex-col md:flex-row gap-3">
        <div class="bg-[var(--code-bg)] rounded p-3 font-mono text-sm overflow-hidden flex-grow transcription-text">
            {{ t.transcription or "No transcription available" }}
        </div>
        <div class="flex md:flex-col gap-2 self-start">
            <button class="bg-[var(--accent)] text-[var(--bg)] py-2 px-3 rounded text-sm cursor-pointer border-none transition-opacity hover:opacity-90 open-raw-btn" data-filename="{{ t.filename }}">File</button>
            <button class="bg-[var(--accent)] text-[var(--bg)] py-2 px-3 rounded text-sm cursor-pointer border-none transition-opacity hover:opacity-90 copy-btn" data-content="{{ t.transcription or 'No transcription available' }}">Copy</button>
        </div>
    </div>
    <div class="hidden transcription-details"
         data-filename="{{ t.filename }}"
         data-created="{{ t.created_at }}"
         data-content="{{ t.transcription or 'No transcription available' }}">
    </div>
</div>
{% endmacro %}

{% block content %}
<div class="flex flex-wrap items-center justify-between mb-6 gap-3">
    <a href="/" class="text-blue-300 underline">‚Üê Back to Home</a>
    <div>
        <form id="uploadForm" class="inline-flex items-center">
            <label for="audioFile" class="flex items-center bg-white text-gray-700 px-3 py-1.5 text-sm rounded shadow-sm hover:bg-gray-50 cursor-pointer transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                Upload
            </label>
            <input type="file" id="audioFile" accept="audio/*" class="hidden">
        </form>
    </div>
</div>

<h1 class="text-2xl font-bold text-center mb-6">Audio Transcriptions</h1>

<!-- Modal for viewing transcriptions -->
<div id="transcriptionModal" class="modal">
    <div class="bg-[var(--card-bg)] rounded-lg w-[90%] max-w-[600px] mx-auto my-[5%] p-6 relative">
        <div class="flex justify-between items-center mb-4">
            <h2 id="modalTitle" class="text-xl font-semibold"></h2>
            <div class="flex gap-2">
                <button class="bg-[var(--accent)] text-[var(--bg)] py-2 px-3 rounded text-sm cursor-pointer border-none transition-opacity hover:opacity-90 modal-open-raw-btn">
                    File
                </button>
                <button class="bg-[var(--accent)] text-[var(--bg)] py-2 px-3 rounded text-sm cursor-pointer border-none transition-opacity hover:opacity-90 modal-copy-btn">
                    Copy
                </button>
                <button class="text-xl cursor-pointer close-modal">&times;</button>
            </div>
        </div>
        <div id="modalContent" class="bg-[var(--code-bg)] p-4 rounded whitespace-pre-wrap font-mono"></div>
    </div>
</div>

<div>
    {% if transcriptions %}
        {% for t in transcriptions %}
            {{ transcription_item(t) }}
        {% endfor %}
    {% else %}
        <div class="bg-[var(--card-bg)] rounded-lg p-4 text-center">No transcriptions available yet</div>
    {% endif %}
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('transcriptionModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalContent = document.getElementById('modalContent');
        const modalCopyBtn = document.querySelector('.modal-copy-btn');
        const modalOpenRawBtn = document.querySelector('.modal-open-raw-btn');
        const audioFileInput = document.getElementById('audioFile');
        const fileName = document.getElementById('fileName');

        // Auto-upload on file selection
        audioFileInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                fileName.textContent = file.name;

                // Create loading indicator
                fileName.textContent = 'Uploading...';

                // Upload file using fetch API
                const formData = new FormData();
                formData.append('file', file);

                fetch('/api/upload-audio?web=1', {
                    method: 'POST',
                    body: file
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        // Reload the page to show the new transcription
                        window.location.reload();
                    }
                })
                .catch(error => {
                    console.error('Upload error:', error);
                    alert('Upload failed: ' + error);
                    fileName.textContent = 'Error - try again';
                });
            }
        });

        // Modal and copy functionality
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('close-modal') || e.target === modal) {
                modal.style.display = 'none';
            }

            // Fixed selector for transcription item
            const itemElement = e.target.closest('.transcription-item');
            if (itemElement && !e.target.classList.contains('copy-btn') && !e.target.classList.contains('open-raw-btn')) {
                const details = itemElement.querySelector('.transcription-details');
                if (details) {
                    openTranscriptionModal(
                        details.dataset.filename,
                        details.dataset.created,
                        details.dataset.content
                    );
                }
            }

            if (e.target.classList.contains('copy-btn')) {
                copyToClipboard(e.target.dataset.content);
                showCopyFeedback(e.target);
            }

            if (e.target === modalCopyBtn) {
                copyToClipboard(modalContent.textContent);
                showCopyFeedback(modalCopyBtn);
            }

            if (e.target.classList.contains('open-raw-btn')) {
                const filename = e.target.dataset.filename;
                openRawAudio(filename);
            }

            if (e.target === modalOpenRawBtn) {
                const filename = modalTitle.textContent.split(' - ')[0];
                openRawAudio(filename);
            }
        });

        function openTranscriptionModal(filename, created, content) {
            modalTitle.textContent = `${filename} - ${formatDate(created)}`;
            modalContent.textContent = content;
            modal.style.display = 'block';
            modalCopyBtn.dataset.content = content;
            modalOpenRawBtn.dataset.filename = filename;
        }

        function formatDate(dateStr) {
            const date = new Date(dateStr);
            return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString();
        }

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).catch(err => {
                console.error('Could not copy text: ', err);
            });
        }

        function openRawAudio(filename) {
            const origin = window.location.origin;
            const rawUrl = `${origin}/static/uploads/${filename}`;
            window.open(rawUrl, '_blank');
        }

        function showCopyFeedback(button) {
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            button.style.backgroundColor = '#2ecc71';

            setTimeout(() => {
                button.textContent = originalText;
                button.style.backgroundColor = '';
            }, 1500);
        }
    });
</script>
{% endblock %}